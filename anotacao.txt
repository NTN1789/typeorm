/



configurando nos imports 


  TypeOrmModule.forRoot({
      type: 'mysql',
      host: "",
      port: 3306,
      username: "",
      password: "",
      database: "",
      entities:[],
      synchronize: true,  // tomar cuidado com o  synchronize para não usar na produção 
    })




migrations no typeORM 

criando scrpits para ficar fácil 

no package json
   "typeorm:ts": "typeorm-ts-node-esm " , 
    "migrate:create":"npm run typeorm:ts migration create -- ./typeorm/migrations/Migrate" ,
          "migrate:up":"npm run typeorm:ts migration:run -- -d ./typeorm/data-source.ts"     //depois do -- -d é o caminho que vai executar 
           // para executar o banco e criar algo 


    vai criar uma pasta com a migrate 



    metódo Up dentro da migrate é quando vc ta fazendo 
    uma nova versão do migrate 


    metódo down e desfazer o migrate



    // CURRENT_TIMESTAMP() essa função pegar o momento atual


    estrutura da tabela

    public async up(queryRunner: QueryRunner): Promise<void> {
   
        await queryRunner.createTable(new Table({
            name: "users",  // nome da tabela
            columns: [{
                // colunas da tabela
                    name:"id",
                    type: "int",
                    isPrimary: true,
                    isGenerated: true,
                    generationStrategy: "increment",   // incrementando o número
                    unsigned:true // não aceitar números negativos 
            },{
                    //coluna nome e definindo como tem que ser 
                    name:"name",
                    type: "varchar",
                    length: "63"
            },{
                    name:"email",
                    type: "varchar",
                    length:"127",
                    isUnique: true
            },{

                name:"password" ,
                type: "varchar",
                length:"127"
            },{
                name:"birthAt",
                type: "date",
                isNullable: true //colocando que pode ser nulo
                
            },{
                name:"role"  ,
                type: "int",
                default: 1
            },{
                  name:"createdAt",
                  type: "timestamp",  
                  default:'CURRENT_TIMESTAMP()' 
        } ,{
            name:"updatedAt",
            type: "timestamp",  
            default:'CURRENT_TIMESTAMP()' 

        }]    
        }));
    } 


    para desfazer algo é so ir no down

        public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.dropTable("users");
    
    
    }